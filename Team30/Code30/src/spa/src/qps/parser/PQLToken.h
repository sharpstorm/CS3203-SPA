#pragma once

#include <string>

using std::string;

enum PQLTokenCategory {
  PQL_PROCESSING_TOKEN = 0x100,
  PQL_SYMBOL_TOKEN = 0x200,
  PQL_DECLARATION_TOKEN = 0x400,
  PQL_QUERY_TOKEN = 0x800,
  PQL_RELATIONSHIP_TOKEN = 0x1000,
  PQL_STRING_TOKEN = 0x2000,
  PQL_INTEGER_TOKEN = 0x4000,
  PQL_LITERAL_TOKEN = 0x8000,
};

const int PQL_TOKEN_CATEGORY_MASK = 0xFFFFFF00;
const int PQL_TOKEN_VARCHAR_MASK = PQL_DECLARATION_TOKEN | PQL_QUERY_TOKEN |
    PQL_RELATIONSHIP_TOKEN | PQL_STRING_TOKEN | PQL_INTEGER_TOKEN;
const int PQL_TOKEN_SYN_MASK = PQL_DECLARATION_TOKEN | PQL_QUERY_TOKEN |
    PQL_RELATIONSHIP_TOKEN | PQL_STRING_TOKEN;

enum PQLTokenType {
  // Processing markers
  PQL_TOKEN_INVALID = PQL_PROCESSING_TOKEN,
  PQL_TOKEN_IGNORE,
  PQL_TOKEN_DELIMITER,
  PQL_TOKEN_CHAR,
  PQL_TOKEN_QUOTE,

  // Symbols
  PQL_TOKEN_SEMICOLON = PQL_SYMBOL_TOKEN,
  PQL_TOKEN_BRACKET_OPEN,
  PQL_TOKEN_BRACKET_CLOSE,
  PQL_TOKEN_COMMA,
  PQL_TOKEN_PERIOD,
  PQL_TOKEN_UNDERSCORE,
  PQL_TOKEN_ASTRIX,

  // Declarations
  PQL_TOKEN_STMT = PQL_DECLARATION_TOKEN,
  PQL_TOKEN_READ,
  PQL_TOKEN_PRINT,
  PQL_TOKEN_CALL,
  PQL_TOKEN_WHILE,
  PQL_TOKEN_IF,
  PQL_TOKEN_ASSIGN,
  PQL_TOKEN_VARIABLE,
  PQL_TOKEN_CONSTANT,
  PQL_TOKEN_PROCEDURE,

  // Query Keywords
  PQL_TOKEN_SELECT = PQL_QUERY_TOKEN,
  PQL_TOKEN_SUCH,
  PQL_TOKEN_THAT,
  PQL_TOKEN_PATTERN,

  // Relationship Keywords
  PQL_TOKEN_FOLLOWS = PQL_RELATIONSHIP_TOKEN,
  PQL_TOKEN_PARENT,
  PQL_TOKEN_USES,
  PQL_TOKEN_MODIFIES,

  PQL_TOKEN_STRING = PQL_STRING_TOKEN,
  PQL_TOKEN_INTEGER = PQL_INTEGER_TOKEN,
  PQL_TOKEN_LITERAL = PQL_LITERAL_TOKEN,
  PQL_TOKEN_STRING_LITERAL,
};

class PQLToken {
 private:
  PQLTokenType type;
  string tokenData;

 public:
  explicit PQLToken(PQLTokenType type);
  PQLToken(PQLTokenType type, string data);

  PQLTokenType getType();
  string getData();
  bool isType(PQLTokenType);
  bool isVarchar();
  bool isSynName();
  bool operator==(const PQLToken& other) const;
};
