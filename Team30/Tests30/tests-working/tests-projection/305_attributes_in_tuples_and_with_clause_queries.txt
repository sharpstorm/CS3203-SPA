1 - Tuple Statement Declaration (Select) All Statement Numbers With 1 
stmt s1;
Select <s1.stmt#,s1.stmt#> with s1.stmt# = 1
1 1
5000
2 - Tuple Statement Declaration  (Select) All Statement Numbers with only 1
stmt s1,s2;
Select <s1.stmt#,s2.stmt#> with s1.stmt# = 1
1 1,1 2,1 3,1 4,1 5,1 6,1 7,1 8,1 9,1 10,1 11,1 12,1 13
5000
3 - Tuple Statement Declaration  (Select) All Statement Numbers with only 8,5
stmt s1,s2;
Select <s1.stmt#,s2.stmt#> with s1.stmt# = 8 with s2.stmt# = 5
8 5
5000
4 - Tuple Statement Declaration  (Select) Statement Number Equivalence
stmt s1,s2;
Select <s1.stmt#,s2.stmt#> with s1.stmt# = s2.stmt#
1 1,2 2,3 3,4 4,5 5,6 6,7 7,8 8,9 9,10 10,11 11,12 12,13 13
5000
5 - Tuple Print Declaration  (Select) Statement Variable Pair with Name
print p;
Select <p.stmt#,p.varName> with p.varName = "notVar"
8 notVar
5000
6 - Tuple Print Declaration (Select) Statement Variable Pair with Num and Name EMPTY
print p;
Select <p.stmt#,p.varName> with p.varName = "notVar" with p.stmt# = 5

5000
7 - Tuple Read Declaration  (Select) Statement Variable Pair with Num and Name
read r;
Select <r.stmt#,r.varName> with r.stmt# = 4 with r.varName = "something"
4 something
5000
8 - Tuple [Stmt, Variable name] Declaration  (Select) Statement VariableName Pair with Name
stmt s; variable v;
Select <s.stmt#,v.varName> with v.varName = "something"
1 something,2 something,3 something,4 something,5 something,6 something,7 something,8 something,9 something,10 something,11 something,12 something,13 something
5000
9 - Tuple Call Declaration  (Select) Statement Name Pair with invalid Name
call c;
Select <c.stmt#,c.procName> with c.procName = "invalid"

5000
10 - Tuple Call Declaration  (Select) Statement Name Pair with call and procedure name equivalence
call c; procedure p;
Select <c.stmt#,p.procName> with c.procName = p.procName
1 Called
5000
11 - Tuple Call Declaration  (Select) Statement Name Pair with call and procedure name equivalence and invalid call
call c; procedure p;
Select <c.stmt#, c.procName, p.procName> with c.procName = p.procName with c.procName = "Attributes"

5000
12 - Tuple [Stmt, Procedure name] Declaration  (Select) StatementNum = procName check ERROR
stmt s; procedure p;
Select <s,p.procName> with s.stmt# = p.procName
SemanticError
5000
13 - Tuple Assign Declaration  (Select) All Assign Statement Numbers with Equivalence and with 3
assign a1, a2;
Select <a1.stmt#,a2.stmt#> with a1.stmt# = a2.stmt# with a2.stmt# = 3
3 3
5000
14 - Tuple Constant Declaration  (Select) All Constants with 3
constant c1, c2;
Select <c1.value,c2.value> with c1.value = 3
3 0,3 1,3 3,3 12
5000
15 - Tuple Constant Declaration  (Select) All Constants with Equivalence with 12
constant c1, c2;
Select <c1.value,c1.value> with c1.value = c2.value with c2.value = 12
12 12
5000
16 - Tuple [if, while] Declaration  (Select) If While Pair with Invalid Equivalence and with 7 
if i;while w;
Select <i.stmt#,w.stmt#> with i.stmt# = w.stmt# with i.stmt# = 7

5000
17 - Tuple [stmt, stmt] Declaration (Follows) Normal Procedure with Equivalence EMPTY
stmt s1, s2;
Select <s1.stmt#, s2.stmt#> such that Follows(s1, s2) with s1.stmt# = s2.stmt#

5000
18 - Tuple [stmt, stmt] Declaration (Follows*) Normal Procedure with s1 = 1
stmt s1, s2;
Select <s1.stmt#, s2.stmt#> such that Follows*(s1, s2) with s1.stmt# = 1
1 2,1 3,1 4,1 5,1 6,1 7,1 10
5000
19 - Tuple [read, stmt] Declaration (Follows*) Normal Procedure with Variable
stmt s; read r;
Select <r, s.stmt#> such that Follows*(r, s) with r.varName = "something"
4 5,4 6,4 7,4 10
5000
20 - NEGATIVE Tuple [read, stmt] Declaration (Follows*) Normal Procedure with Conflict
stmt s; read r;
Select <r, s.stmt#> with r.varName = "var" such that Follows*(r, s) with r.varName = "something"

5000
21 - Tuple [print, print] Declaration (Next*) From Print Name to Print lineNum with Name
print p1, p2;
Select <p1.varName, p2.stmt#> such that Next*(p1, p2) with p2.varName = "notVar"
something 8
5000
22 - Tuple [if, stmt] Declaration (Next) From If to If Body with same Equivalence
if i; stmt s;
Select <i.stmt#, s.stmt#> such that Next(i, s) with i.stmt# = i.stmt# with s.stmt# = s.stmt#
7 8, 7 9
5000
23 - Tuple [if, print name] Declaration (Next) From If to If Body with Equivalence EMPTY
if i; print p;
Select <i.stmt#, p.varName> such that Next(i, p) with p.stmt# = i.stmt#

5000
24 - Tuple [if, print name, print num] Declaration (Next) From If to If Body
if i; print p;
Select <i.stmt#, p.varName, p.stmt#> such that Next(i, p) with p.stmt# = 9
7 var 9
5000
25 - Tuple [assign, print name] Declaration (Follows) Statements with 12
assign a; print p;
Select <a.stmt#, p.varName> such that Follows(a, p) with a.stmt# = 12
12 test
5000
26 - Tuple [assign, print name] Declaration (Follows) Error
assign a; print p;
Select <a.stmt#, p.varName> such that Follows(a, p) with p.procName = "something"
SemanticError
5000
27 - Tuple [assign, print name] Declaration (Follows) Error
assign a; print p;
Select <a.stmt#, p.varName> such that Follows(a, p) with a.value = 12
SemanticError
5000